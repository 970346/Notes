<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.feng.mybatis.Dao.EmployeeMapper">
    <!--resultType如果返回值是一个集合，要写集合中元素的类型-->
    <select id="getEmpsByLastNameLike" resultType="Employee">
      select * from tbl_employee where last_name like #{lastName}
    </select>
    <select id="getEmpByIdReturnMap" resultType="map">
      select * from tbl_employee where id = #{id}
    </select>
    <select id="getEmpsByLastNameLikeReturnMap" resultType="map">
        select * from tbl_employee where last_name like #{lastName}
    </select>

    <!--resultMap自定义结果集规则-->
    <!--
        type:自定义规则的java类型
        id:唯一id方便使用
    -->
    <resultMap id="employee" type="com.feng.mybatis.Bean.Employee">
        <!--指定主键列的封装规则 id定义主键会底层有优化-->
        <!--
            column:指定哪一列
            property: 指定对应的javaBean属性
        -->
        <id column="id" property="id"/>
        <!--定义普通列封装-->
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>
    <select id="getEmpById" resultMap="employee">
        select * from tbl_employee where id = #{id}
    </select>

    <!--
        场景一：查询Employee的同时查询员工对应的部门信息
    -->
    <!--方式一：联合查询：级联属性封装结果-->
    <resultMap id="MyDifEmp" type="com.feng.mybatis.Bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>
    <!--方式二：使用association定义关联的单个对象的封装规则-->
    <resultMap id="MyDifEmp2" type="com.feng.mybatis.Bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--    association指定联合的javaBean对象
            property：指定哪个属性是联合的对象
            javaType：指定这个属性对象的类型[不能省略]
        -->
        <association property="dept" javaType="com.feng.mybatis.Bean.Department">
            <id column="did" property="id" />
            <result column="dept_name" property="departmentName" />
        </association>
    </resultMap>
    <select id="getEmpAndDept" resultMap="MyDifEmp2">
        select
          e.id id,e.last_name last_name,e.email email,e.gender gender,e.d_id d_id,d.id did,d.dept_name dept_name
        from
          tbl_employee e,tbl_dept d where e.d_id=d.id and e.id=#{id}
    </select>
    <!--方式三：使用association进行分步查询-->
    <!--
       1.先按照员工id查询员工信息
       2.根据查询员工信息中id查询部门信息
       3. 将部门信息设置到员工中
    -->
    <resultMap id="MyEmpByStep" type="com.feng.mybatis.Bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--使用association定义关联对象的封装规则
            select:表明当前属性是调用select指定的方法查出的结果
        流程：使用select指定的方法（传入column指定的列的参数的值）查出对象，并封装给property指定的属性
        -->
        <association property="dept" select="com.feng.mybatis.Dao.DepartmentMapper.getDeptById" column="d_id"/>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpDis">
        select * from tbl_employee where id=#{id};
    </select>

    <!--分段查询可以延迟加载
        每次查询Employee对象的时候，都将一起查询出来
        部门信息在我们使用的时候再去查询
        分段查询的基础上加两个配置
    -->


    <select id="getEmpByDeptId" resultType="com.feng.mybatis.Bean.Employee">
         select * from tbl_employee where d_id = #{deptId}
    </select>

    <!--
        <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        场景三：如果查询出来的员工是女生，就把部门信息查询出来，否则不查询；如果是男生，将其lastName赋值给email
    -->
    <resultMap id="MyEmpDis" type="com.feng.mybatis.Bean.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--
            column：指定判定的列
            javaType：列值对应的java类型
        -->
        <discriminator javaType="string" column="gender">
            <!--女生-->
            <!--resultType：指定封装的结果类型-->
            <case value="0" resultType="com.feng.mybatis.Bean.Employee">
                <association property="dept" select="com.feng.mybatis.Dao.DepartmentMapper.getDeptById" column="d_id"/>
            </case>
            <!--男生-->
            <case value="1" resultType="com.feng.mybatis.Bean.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>
</mapper>
