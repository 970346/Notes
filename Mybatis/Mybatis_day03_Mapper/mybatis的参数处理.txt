单个参数：mybatis不会做特殊处理，
        #{参数名}：取出参数值。


多个参数：mybatis会做特殊处理
    多个参数会被封装成一个map，
        key:param1....paramN，或者参数的索引也可以
        value:传入的参数值
    #{}就是从map中获取指定的key值

    异常：Caused by: org.apache.ibatis.binding.BindingException: Parameter 'id' not found.
     Available parameters are [0, 1, param1, param2]
    操作
        方法：public Employee getEmpByIdAndLastName(String id,String lastname);
        取值：id=#{id} last_name=#{lastname}


命令参数：明确指定封装时map的key：@Param("")
    多个参数会被封装成一个map，
        key：使用@Param注解指定的值
        value：参数值
    #{指定的key}取出对应的参数值

POJO：
如果多个参数正好是业务逻辑的数据模型，我们就可以直接传入pojo；
    #{属性名}：取出传入的pojo值
Map：
如果多个参数不是业务逻辑的数据模型，没有对应的pojo，为了方便可以传入map
    #{key}：取出map中对应的值

TO
如果多个参数不是业务模型中的数据，但是经常使用，推荐编写TO（Transfer Object）数据传输对象
例如分页查询：page{int index; int size;}



=========================================================================================================
场景一：
    public Employee getEmp(@Param("id") Integer id,String lastname);
        取值：id===>#{id/param1}    last_name===>#{param2}
场景二：
    public Employee getEmp(Integer id,@Param("emp") Employee emp);
        取值：id===>#{param1}    last_name===>#{emp..lastName/param2.lastName}
场景三：
    public Employee getEmp(List<Integer> ids);
        如果是Collection(List、Set)类型或者是数组，也会特殊处理。也是把传入的list或者数组封装在map中
        此时key：Collection(collection),如果是List还可以使用这个key(list)、数组(array)
        取值：取出第一个id的值：#{list[0]}

=============================================结合源码的分析===============================================
方法：public Employee getEmpByIdAndLastName(@Param("id") String id,@Param("lastname") String lastname);

ParamNameResolver解析参数封装map的：
一、names:{0=id,i=lastName}---------->构造器的时候就确定好了
    确定流程：
        1.获取每个标了param注解的参数的@Param的值，id，lastName:
        2.每次解析一个参数，给map保存信息（key：参数索引，value：name的值）
            当name的值标注了Param注解时，值为注解的值
            当没有标注注解的时候：a.如果全局配置配置了useActualParamName（JDK版本1.8以上）：name=参数名
                                  b.name=map.size();相当于当前元素的索引


public Object getNamedParams(Object[] args){
    final int paramCount = names.size();
    //判断参数是否为空！如果为空则返回null
    if(args == null||paramCount == 0){
        return null;
    }
    //如果只有一个元素，并且没有Param注解时，返回args[0]------>单个参数直接返回
    else if(!hasParamAnnotation&&paramCount == 1){
        return args[names.firstKey()];
    }
    //多个元素或者有Param标注时
    else{
        final Map<String,Object> param = new ParamMap<Object>();
        int i = 0;
        //遍历names集合;{0=id,1=lastName}
        for(Map.Entry<Integer,String>) entry : names.entrySet()){
            //names集合的value作为key；names集合的key又作为取值的参考args[0]:args[1,"Tom];
            //{id:args[0]:1,lastName=args[1]:Tom}
            param.put(entry.getValue(),args[entry.getKey()]);
            // add generic param names (param1,param2,...)
            //额外的将每一个参数也保存到map中，使用新的key：param1，parm2..paramN
            //效果：有Param注解就可以拿到#{指定的key}，或者{param1}
            final String genericParamName = GENERIC_NAME_PREFIX+String.valueOf(i);
            // ensure not to overwrite parameter named with @Param
            if(!names.containsValue(genericParamName)){
                param.put(genericParamName,args[entry.getKey()]);
            }
            i++
        }
        return param;
    }
}

总结：参数多时会封装map，为了不混乱，我们可以使用@Param来指定封装时使用的key；
#{key}就可以取出map中的值


===============================================参数值的获取===============================================
#{}：可以获取map中的值或者pojo对象属性值；
${}：可以获取map中的值或者pojo对象属性值；

        select * from tbl_employee where id=${id} and last_name=#{lastname}
        Preparing: select * from tbl_employee where id=1 and last_name=?   (BaseJdbcLogger.java:145)
    区别：
        #{}：是以预编译的形式，将参数设置到sql语句中；PreparedStatement;
        ${}：取出的值直接拼装在sql语句中；会有安全问题；

    使用场景：
        #{}：大部分情况
        ${}：当原生jdbc不支持占位符的地方，如分表查询、排序等

#{}：更丰富的用法：
    规定参数的规则：JavaType、jdbcType、mode(存储过程)、numericScale(数字处理)、resultMap、typeHandler、jdbcTypeName、expression(未来准备支持的功能)

    jdbcType通常需要在某种特定的条件下被设置：
        在数据为null时，有些数据库可能不能识别mybatis对null的默认处理。如oracle(会报错)
        JdbcType OTHER:无效的类型，因为mybatis对所有的null都映射的时原生Jdbc的OTHER类型oracle不能正确处理
        由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持
        1、#{email,jdbcType=OTHER};
        2、jdbcTypeForNull=NULL